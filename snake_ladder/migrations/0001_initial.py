# Generated by Django 5.1.2 on 2025-04-18 17:21

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CellContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Educational content')),
                ('topic', models.CharField(blank=True, max_length=100, null=True)),
                ('part', models.IntegerField(blank=True, choices=[(5, 'Part 5'), (6, 'Part 6')], null=True)),
                ('type', models.CharField(blank=True, choices=[('JUD', 'Judiciary'), ('LEG', 'Legislative'), ('EXEC', 'Executive')], max_length=4, null=True)),
                ('source_id', models.IntegerField(blank=True, help_text='ID of the Topic this content relates to', null=True)),
            ],
            options={
                'ordering': ['topic'],
            },
        ),
        migrations.CreateModel(
            name='GameFact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fact_text', models.TextField(help_text='The constitutional law fact to display in the game')),
            ],
            options={
                'verbose_name': 'Game Fact',
                'verbose_name_plural': 'Game Facts',
            },
        ),
        migrations.CreateModel(
            name='Cell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(unique=True)),
                ('cell_type', models.CharField(choices=[('NORMAL', 'Normal Cell'), ('SNAKE_LADDER', 'Snake-Ladder Cell')], default='NORMAL', max_length=15)),
                ('contents', models.ManyToManyField(blank=True, related_name='cells', to='snake_ladder.cellcontent')),
                ('current_content', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='displayed_on_cell', to='snake_ladder.cellcontent')),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='GameRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('points', models.JSONField(default=dict)),
                ('current_content_part', models.IntegerField(choices=[(5, 'Part 5'), (6, 'Part 6')], null=True)),
                ('current_content_type', models.CharField(choices=[('JUD', 'Judiciary'), ('LEG', 'Legislative'), ('EXEC', 'Executive')], max_length=4, null=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_rooms', to=settings.AUTH_USER_MODEL)),
                ('current_turn', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='current_turn_rooms', to=settings.AUTH_USER_MODEL)),
                ('players', models.ManyToManyField(related_name='joined_rooms', to=settings.AUTH_USER_MODEL)),
                ('winner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games_won', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlayerOverallPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.IntegerField(default=0)),
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CellBookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_number', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user',)},
            },
        ),
        migrations.CreateModel(
            name='CellHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visited_at', models.DateTimeField(auto_now_add=True)),
                ('question_text', models.TextField(null=True)),
                ('selected_answer', models.CharField(max_length=255, null=True)),
                ('correct_answer', models.CharField(max_length=255, null=True)),
                ('answer_correct', models.BooleanField(null=True)),
                ('time_to_answer', models.IntegerField(null=True)),
                ('topic_category', models.CharField(max_length=100, null=True)),
                ('difficulty_level', models.CharField(choices=[('EASY', 'Easy'), ('MEDIUM', 'Medium'), ('HARD', 'Hard')], max_length=20, null=True)),
                ('moves_after_answer', models.IntegerField(null=True)),
                ('cumulative_score', models.IntegerField(default=0)),
                ('attempt_number', models.IntegerField(default=1)),
                ('options', models.TextField(null=True)),
                ('source_cell', models.IntegerField(blank=True, null=True)),
                ('dice_roll', models.IntegerField(blank=True, null=True)),
                ('cell', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snake_ladder.cell')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snake_ladder.gameroom')),
            ],
            options={
                'ordering': ['-visited_at'],
                'indexes': [models.Index(fields=['player', 'room'], name='snake_ladde_player__446b0d_idx'), models.Index(fields=['player', 'answer_correct'], name='snake_ladde_player__dc9374_idx')],
            },
        ),
        migrations.CreateModel(
            name='PlayerPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField(default=1)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_positions', to='snake_ladder.gameroom')),
            ],
            options={
                'unique_together': {('room', 'player')},
            },
        ),
    ]
